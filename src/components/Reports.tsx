import React, { useState, useMemo } from 'react';
import { useSales } from '../context/SalesContext';
import { useInventory } from '../context/InventoryContext';
import { useAuth } from '../context/AuthContext';
import { Search, Filter, Calendar, Download, Printer } from 'lucide-react';

interface SaleItem {
  productId: string;
  quantity: number;
  price: number;
}

interface Sale {
  id: string;
  items: SaleItem[];
  subtotal: number;
  total: number;
  discount: number;
  paymentReceived: number;
  change: number;
  date: string;
  cashier: string;
  storeLocation: string;
}

const Reports: React.FC = () => {
  const { sales } = useSales();
  const { products } = useInventory();
  const { user, isAdmin } = useAuth();
  const [searchTerm, setSearchTerm] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  // Deduplicate sales using a Map
  const uniqueSales = useMemo(() => {
    const salesMap = new Map<string, Sale>();
    sales.forEach(sale => {
      if (!salesMap.has(sale.id)) {
        salesMap.set(sale.id, {
          ...sale,
          subtotal: sale.subtotal || 0,
          total: sale.total || 0,
          discount: sale.discount || 0,
          paymentReceived: sale.paymentReceived || 0,
          change: sale.change || 0,
          items: sale.items.map(item => ({
            ...item,
            quantity: item.quantity || 0,
            price: item.price || 0
          }))
        });
      }
    });
    return Array.from(salesMap.values());
  }, [sales]);

  const filteredSales = useMemo(() => {
    let filtered = uniqueSales;

    // Filter by user if not admin
    if (!isAdmin && user) {
      filtered = filtered.filter((sale) => sale.cashier === user.fullName);
    }

    // Apply search filter
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter((sale) => {
        const matchesSaleId = sale.id.toLowerCase().includes(searchLower);
        const matchesCashier = (sale.cashier || '').toLowerCase().includes(searchLower);
        const matchesProducts = sale.items.some((item) => {
          const product = products.find((p) => p.id === item.productId);
          return product?.name.toLowerCase().includes(searchLower);
        });
        return matchesSaleId || matchesCashier || matchesProducts;
      });
    }

    // Apply date range filter
    if (startDate) {
      filtered = filtered.filter(
        (sale) => new Date(sale.date) >= new Date(startDate)
      );
    }
    if (endDate) {
      const endDateTime = new Date(endDate);
      endDateTime.setHours(23, 59, 59, 999);
      filtered = filtered.filter((sale) => new Date(sale.date) <= endDateTime);
    }

    return filtered;
  }, [uniqueSales, searchTerm, startDate, endDate, products, isAdmin, user]);

  const totalAmount = useMemo(() => 
    filteredSales.reduce((sum, sale) => sum + (sale.total || 0), 0),
    [filteredSales]
  );

  const totalItems = useMemo(() => 
    filteredSales.reduce((sum, sale) => 
      sum + sale.items.reduce((itemSum, item) => itemSum + (item.quantity || 0), 0), 0),
    [filteredSales]
  );

  const handleExport = () => {
    const headers = [
      'Date',
      'Sale ID',
      'Cashier',
      'Products',
      'Subtotal',
      'Discount',
      'Total',
      'Payment',
      'Change',
    ];

    const rows = filteredSales.map((sale) => [
      new Date(sale.date).toLocaleString('fr-FR'),
      sale.id || 'N/A',
      sale.cashier || 'N/A',
      sale.items
        .map((item) => {
          const product = products.find((p) => p.id === item.productId);
          return `${product?.name || 'Unknown Product'} (x${item.quantity || 0})`;
        })
        .join('; '),
      (sale.subtotal || 0).toFixed(2),
      (sale.discount || 0).toFixed(2),
      (sale.total || 0).toFixed(2),
      (sale.paymentReceived || 0).toFixed(2),
      (sale.change || 0).toFixed(2),
    ]);

    const summaryRows = [
      [''],
      ['Summary'],
      ['Total Sales Amount:', `HTG ${totalAmount.toFixed(2)}`],
      ['Total Items Sold:', totalItems.toString()],
      ['Total Transactions:', filteredSales.length.toString()],
      ['Period:', `${startDate || 'All time'}${endDate ? ` to ${endDate}` : ''}`]
    ];

    const csvContent = [
      'UP2DATE FASHION - Sales Report',
      `Generated: ${new Date().toLocaleString('fr-FR')}`,
      `Generated by: ${user?.fullName || 'N/A'}`,
      '',
      headers.join(','),
      ...rows.map((row) => row.join(',')),
      ...summaryRows.map((row) => row.join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `sales_report_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
  };

  const handlePrint = () => {
    window.print();
  };

  if (!user) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <p className="font-bold">Error:</p>
          <p>You must be logged in to view reports.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <style>
        {`
          @media print {
            body * {
              visibility: hidden;
            }
            .print-section, .print-section * {
              visibility: visible;
            }
            .print-section {
              position: absolute;
              left: 0;
              top: 0;
              width: 100%;
            }
            .no-print {
              display: none !important;
            }
            .print-only {
              display: block !important;
            }
          }
        `}
      </style>

      <div className="text-center mb-8 no-print">
        <h1 className="text-3xl font-bold text-gray-800">UP2DATE FASHION</h1>
        <p className="text-gray-600 mt-2">Sales Reports</p>
        <p className="text-sm text-gray-500 mt-1">
          Generated on: {new Date().toLocaleString('fr-FR', { 
            dateStyle: 'full', 
            timeStyle: 'medium' 
          })}
        </p>
      </div>

      <div className="flex justify-end space-x-2 mb-6 no-print">
        <button
          onClick={handlePrint}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          <Printer className="inline-block mr-2" size={18} />
          Print Report
        </button>
        <button
          onClick={handleExport}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          <Download className="inline-block mr-2" size={18} />
          Export CSV
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-md p-6 mb-6 no-print">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="relative">
            <input
              type="text"
              placeholder="Search sales..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border rounded"
            />
            <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
          </div>

          <div className="flex items-center space-x-2">
            <Calendar className="text-gray-400" size={18} />
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="flex-1 p-2 border rounded"
            />
          </div>

          <div className="flex items-center space-x-2">
            <Calendar className="text-gray-400" size={18} />
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="flex-1 p-2 border rounded"
            />
          </div>
        </div>

        <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-blue-800">Total Sales</h3>
            <p className="text-2xl font-bold text-blue-900">HTG {totalAmount.toFixed(2)}</p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-green-800">Items Sold</h3>
            <p className="text-2xl font-bold text-green-900">{totalItems}</p>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-purple-800">Transactions</h3>
            <p className="text-2xl font-bold text-purple-900">{filteredSales.length}</p>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md print-section">
        <div className="text-center p-6 print-only" style={{ display: 'none' }}>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">UP2DATE FASHION</h1>
          <h2 className="text-xl text-gray-600 mb-4">Sales Report</h2>
          <div className="flex justify-between items-center max-w-2xl mx-auto mb-6 text-sm text-gray-500">
            <div>
              <p>Generated by: {user?.fullName}</p>
              <p>Period: {startDate ? new Date(startDate).toLocaleDateString('fr-FR') : 'All time'} 
                 {endDate ? ` - ${new Date(endDate).toLocaleDateString('fr-FR')}` : ''}</p>
            </div>
            <div className="text-right">
              <p>Generated on: {new Date().toLocaleString('fr-FR')}</p>
              <p>Total Sales: HTG {totalAmount.toFixed(2)}</p>
            </div>
          </div>
          <div className="border-b border-gray-200 mb-6"></div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sale ID</th>
                {isAdmin && (
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cashier</th>
                )}
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Products</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Discount</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Net Paid</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredSales.map((sale) => (
                <tr key={`${sale.id}-${sale.date}`}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {new Date(sale.date).toLocaleString('fr-FR')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">{sale.id}</td>
                  {isAdmin && (
                    <td className="px-6 py-4 whitespace-nowrap">{sale.cashier}</td>
                  )}
                  <td className="px-6 py-4">
                    <ul className="list-disc list-inside">
                      {sale.items.map((item, index) => {
                        const product = products.find((p) => p.id === item.productId);
                        return (
                          <li key={`${sale.id}-${item.productId}-${index}`}>
                            {product?.name || 'Unknown Product'} (x{item.quantity || 0})
                          </li>
                        );
                      })}
                    </ul>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">HTG {(sale.total || 0).toFixed(2)}</td>
                  <td className="px-6 py-4 whitespace-nowrap">HTG {(sale.discount || 0).toFixed(2)}</td>
                  <td className="px-6 py-4 whitespace-nowrap">HTG {((sale.total || 0) - (sale.discount || 0)).toFixed(2)}</td>
                </tr>
              ))}
              {filteredSales.length === 0 && (
                <tr>
                  <td colSpan={isAdmin ? 7 : 6} className="px-6 py-4 text-center text-gray-500">
                    No sales found for the selected period
                  </td>
                </tr>
              )}
            </tbody>
            <tfoot className="bg-gray-50">
              <tr>
                <td colSpan={isAdmin ? 4 : 3} className="px-6 py-4 text-right font-semibold">Totals:</td>
                <td className="px-6 py-4 whitespace-nowrap font-bold">HTG {totalAmount.toFixed(2)}</td>
                <td className="px-6 py-4 whitespace-nowrap font-bold">
                  HTG {filteredSales.reduce((sum, sale) => sum + (sale.discount || 0), 0).toFixed(2)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap font-bold">
                  HTG {filteredSales.reduce((sum, sale) => sum + ((sale.total || 0) - (sale.discount || 0)), 0).toFixed(2)}
                </td>
              </tr>
            </tfoot>
          </table>
        </div>

        <div className="text-center p-4 print-only" style={{ display: 'none' }}>
          <div className="border-t border-gray-200 mt-6 pt-4">
            <p className="text-sm text-gray-500">End of Report</p>
            <p className="text-xs text-gray-400">UP2DATE FASHION - All rights reserved</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Reports;